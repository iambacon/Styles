@using System.Linq
@model IAmBacon.ViewModels.PostViewModel
@section css
{
    @if (!Model.NoCss)
    {
        @Styles.Render("~/bundles/postCss")
    }
}
@section iecss
{
    @if (!Model.NoCss)
    {
        @Styles.Render("~/bundles/postIeCss")
    }
}

<article itemscope itemtype="http://schema.org/BlogPosting">
    <header>
        <div class="pageTitle">
            <h1 class="layoutContainer layoutContainer--visible has-triangle pageTitle-headline pageTitle-headline--sm pageTitle-headline--post" itemprop="name headline">@Model.Title</h1>
        </div>
        <div class="layoutContainer">
            <ul class="articleLayoutContainer metaData listInline">
                <li class="m-r--half">
                    <strong>Published:</strong>
                    <time datetime="@Model.DateTime" itemprop="datePublished">@Model.DateCreated</time>
                </li>
                <li>
                    <strong>Category:</strong>
                    @Html.RouteLink(Model.Category, "Category", new { name = Model.Category })
                </li>
            </ul>
        </div>
    </header>
    <div class="layoutContainer">
        <div class="articleLayoutContainer">
            @if (@Model.HasImage)
            {
                <figure>
                    <img alt="@Model.Title" src="@Model.Image" />
                </figure>
            }
            @Model.Content
        </div>
        <footer>
            <address class="illStayHere container">
                <div class="author cf">
                    <strong class="visuallyHidden">Author:</strong>
                    <img class="author-image" src="~/Content/images/avatar.jpg" alt="Profile picture for Colin Bacon" />
                    @Html.ActionLink(@Model.Author, "Index", "Home", null, new { rel = "author", @class = "author-title" })
                    <p class="author-desc">Colin bacon is a professional development engineer, with a passion for C# and creating compelling frontend experiences with HTML and CSS.  In his free time he can be found teaching skiing at his local slope.</p>
                    <div class="author-links">
                        @{Html.RenderPartial("_SocialLinks");}
                    </div>
                </div>
            </address>
            @if (Model.DisplayTags)
            {
                <section>
                    <h4 class="textUpper inlineBlock m-r--half">Tags</h4>
                    <ul class="listInline inlineBlock">
                        @Html.DisplayFor(x => x.Tags)
                    </ul>
                </section>
            }
        </footer>
        @if (@Model.Comments.Any())
            {
            <h2>@Model.Comments.Count() Comments</h2>
                <ol class="comments">
                    @Html.DisplayFor(x => x.Comments)
                </ol>
        }
    </div>
</article>
@if (@Model.CommentsActive)
{
    <section class="respond">
        <h2 class="h1">Leave a Comment</h2>
        @using (Html.BeginForm("SaveComment", "Post", FormMethod.Post, new { @class = "comment-form" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.Title)
            @Html.LabelFor(x => x.NewComment.Name)
            @Html.TextBoxFor(x => x.NewComment.Name, new { autocomplete = "off", required = "required" })
            @Html.LabelFor(x => x.NewComment.Email)
            @Html.TextBoxFor(x => x.NewComment.Email, new { type = "email" })
            <em>This is only used for gravitar image</em>
            @Html.LabelFor(x => x.NewComment.Url)
            @Html.TextBoxFor(x => x.NewComment.Url, new { type = "url" })
            @Html.LabelFor(x => x.NewComment.Content)
            @Html.TextAreaFor(x => x.NewComment.Content, new { required = "required" })
            <input class="button" type="submit" id="submit" value="Submit Comment" name="submit">
        }
    </section>
}