namespace IAmBacon.Attributes
{
    using System;
    using System.Web.Mvc;

    /// <summary>
    /// To improve Search Engine Optimization SEO, there should only be a single URL for each resource. Case
    /// differences and/or URL's with/without trailing slashes are treated as different URL's by search engines. This
    /// filter redirects all non-canonical URL's based on the settings specified to their canonical equivalent.
    /// Note: Non-canonical URL's are not generated by this site template, it is usually external sites which are
    /// linking to your site but have changed the URL case or added/removed trailing slashes.
    /// (See Google's comments at http://googlewebmastercentral.blogspot.co.uk/2010/04/to-slash-or-not-to-slash.html
    /// and Bing's at http://blogs.bing.com/webmaster/2012/01/26/moving-content-think-301-not-relcanonical).
    /// </summary>
    /// <remarks>
    /// Full attribution for this attribute goes to Rehan Saeed.
    /// https://github.com/RehanSaeed/ASP.NET-MVC-Boilerplate
    /// </remarks>
    public class RedirectToCanonicalUrlAttribute : FilterAttribute, IAuthorizationFilter
    {
        private const char QueryCharacter = '?';
        private const char SlashCharacter = '/';

        private readonly bool appendTrailingSlash;
        private readonly bool lowercaseUrls;

        public RedirectToCanonicalUrlAttribute(bool appendTrailingSlash, bool lowercaseUrls)
        {
            this.appendTrailingSlash = appendTrailingSlash;
            this.lowercaseUrls = lowercaseUrls;
        }

        public void OnAuthorization(AuthorizationContext filterContext)
        {
            if (filterContext == null)
            {
                throw new ArgumentNullException(nameof(filterContext));
            }

            if (filterContext.HttpContext.Request.HttpMethod == "GET")
            {
                string canonicalUrl;
                if (!this.TryGetCanonicalUrl(filterContext, out canonicalUrl))
                {
                    this.HandleNonCanonicalRequest(filterContext, canonicalUrl);
                }
            }
        }

        /// <summary>
        /// Handles HTTP requests for URL's that are not canonical. Performs a 301 Permanent Redirect to the canonical URL.
        /// </summary>
        /// <param name="filterContext">An object that encapsulates information that is required in order to use the
        /// <see cref="RedirectToCanonicalUrlAttribute" /> attribute.</param>
        /// <param name="canonicalUrl">The canonical URL.</param>
        private void HandleNonCanonicalRequest(AuthorizationContext filterContext, string canonicalUrl)
        {
            filterContext.Result = new RedirectResult(canonicalUrl, true);
        }

        /// <summary>
        /// Determines whether the specified URl is canonical and if it is not, outputs the canonical URL.
        /// </summary>
        /// <param name="filterContext">An object that encapsulates information that is required in order to use the
        /// <see cref="RedirectToCanonicalUrlAttribute" /> attribute.</param>
        /// <param name="canonicalUrl">The canonical URL.</param>
        /// <returns><c>true</c> if the URL is canonical, otherwise <c>false</c>.</returns>
        private bool TryGetCanonicalUrl(AuthorizationContext filterContext, out string canonicalUrl)
        {
            bool isCanonical = true;

            Uri url = filterContext.HttpContext.Request.Url;
            canonicalUrl = url.ToString();
            int queryIndex = canonicalUrl.IndexOf(QueryCharacter);

            // If we are not dealing with the home page. Note, the home page is a special case and it doesn't matter
            // if there is a trailing slash or not. Both will be treated as the same by search engines.
            if (url.AbsolutePath.Length > 1)
            {
                if (queryIndex == -1)
                {
                    bool hasTrailingSlash = canonicalUrl[canonicalUrl.Length - 1] == SlashCharacter;

                    if (this.appendTrailingSlash)
                    {
                        // Append a trailing slash to the end of the URL.
                        if (!hasTrailingSlash && !this.HasNoTrailingSlashAttribute(filterContext))
                        {
                            canonicalUrl += SlashCharacter;
                            isCanonical = false;
                        }
                    }
                    else
                    {
                        // Trim a trailing slash to the end of the URL.
                        if (hasTrailingSlash)
                        {
                            canonicalUrl = canonicalUrl.TrimEnd(SlashCharacter);
                            isCanonical = false;
                        }
                    }
                }
                else
                {
                    bool hasTrailingSlash = canonicalUrl[queryIndex - 1] == SlashCharacter;

                    if (this.appendTrailingSlash)
                    {
                        // Append a trailing slash to the end of the URL but before the query string.
                        if (!hasTrailingSlash && !this.HasNoTrailingSlashAttribute(filterContext))
                        {
                            canonicalUrl = canonicalUrl.Insert(queryIndex, SlashCharacter.ToString());
                            isCanonical = false;
                        }
                    }
                    else
                    {
                        // Trim a trailing slash to the end of the URL but before the query string.
                        if (hasTrailingSlash)
                        {
                            canonicalUrl = canonicalUrl.Remove(queryIndex - 1, 1);
                            isCanonical = false;
                        }
                    }
                }
            }

            if (this.lowercaseUrls)
            {
                foreach (char character in canonicalUrl)
                {
                    if (this.HasNoLowercaseQueryStringAttribute(filterContext) && queryIndex != -1)
                    {
                        if (character == QueryCharacter)
                        {
                            break;
                        }

                        if (char.IsUpper(character) && !this.HasNoTrailingSlashAttribute(filterContext))
                        {
                            canonicalUrl = canonicalUrl.Substring(0, queryIndex).ToLower()
                                           + canonicalUrl.Substring(queryIndex, canonicalUrl.Length - queryIndex);
                            isCanonical = false;
                            break;
                        }
                    }
                    else
                    {
                        if (char.IsUpper(character) && !this.HasNoTrailingSlashAttribute(filterContext))
                        {
                            canonicalUrl = canonicalUrl.ToLower();
                            isCanonical = false;
                            break;
                        }
                    }
                }
            }

            return isCanonical;
        }

        /// <summary>
        /// Determines whether the specified action or its controller has the <see cref="NoTrailingSlashAttribute"/>
        /// attribute specified.
        /// </summary>
        /// <param name="filterContext">The filter context.</param>
        /// <returns><c>true</c> if a <see cref="NoTrailingSlashAttribute"/> attribute is specified, otherwise
        /// <c>false</c>.</returns>
        private bool HasNoTrailingSlashAttribute(AuthorizationContext filterContext)
        {
            return filterContext.ActionDescriptor.IsDefined(typeof(NoTrailingSlashAttribute), false) ||
                filterContext.ActionDescriptor.ControllerDescriptor.IsDefined(typeof(NoTrailingSlashAttribute), false);
        }

        /// <summary>
        /// Determines whether the specified action or its controller has the <see cref="NoLowercaseQueryStringAttribute"/>
        /// attribute specified.
        /// </summary>
        /// <param name="filterContext">The filter context.</param>
        /// <returns><c>true</c> if a <see cref="NoLowercaseQueryStringAttribute"/> attribute is specified, otherwise
        /// <c>false</c>.</returns>
        private bool HasNoLowercaseQueryStringAttribute(AuthorizationContext filterContext)
        {
            return filterContext.ActionDescriptor.IsDefined(typeof(NoLowercaseQueryStringAttribute), false) ||
                filterContext.ActionDescriptor.ControllerDescriptor.IsDefined(typeof(NoLowercaseQueryStringAttribute), false);
        }
    }
}